#!groovy

pipeline {

    agent {
        label 'cme-eastwatch'
    }

    stages {
        stage('Checkout') {
            steps {
                // Get some code from a GitHub repository
//                git branch: 'ci',
//                    url: 'https://github.com/BerndDoser/raxml-ng.git'
                sh '''
                    git submodule update --init --recursive
                    git submodule add https://github.com/amkozlov/ngtest.git
                '''
            }
        }
        stage('Build') {
            agent {
                dockerfile {
                    reuseNode true
                    filename 'dockerfile-gcc-11'
                    dir 'ci'
                }
            }
            steps {
                sh '''
                    rm -fr build && mkdir -p build && cd build
                    cmake -DCMAKE_BUILD_TYPE=Release -DUSE_MPI=ON .. 2>&1 |tee cmake.out
                    make 2>&1 |tee make.out
                '''
            }
        }
        stage('Benchmark matrix') {
            matrix {
                axes {
                    axis {
                        name 'PARALLEL'
                        values '-np 1 build/bin/raxml-ng-mpi --threads 1',
                               '-np 1 build/bin/raxml-ng-mpi --threads 6',
                               '-np 3 build/bin/raxml-ng-mpi --threads 2 --workers 1',
                               '-np 3 build/bin/raxml-ng-mpi --threads 2 --workers 3'
                    }
                }
                stages {
                    stage('Benchmark') {
                        agent {
                            dockerfile {
                                reuseNode true
                                filename 'dockerfile-gcc-11'
                                dir 'ci'
                            }
                        }
                        options {
                            lock('synchronous-matrix')
                        }
                        environment { 
                            LOCATION = sh (returnStdout: true, script: "ci/get_parallel_prefix.sh \"$PARALLEL\"").trim()
                        }
                        steps {
                            sh """
                                mkdir -p out/${LOCATION}
                                mpirun ${PARALLEL} --all --msa ngtest/data/dna8.fa --model GTR+G --brlen linked \
                                  --prefix out/${LOCATION}/test --redo --seed 1
                            """
                        }
                    }
                }
            }
        }
        stage('Publish benchmarks') {
            steps {
                sh "cd ci && ./generate_html.py ../out"
            }
            post {
                always {
                publishHTML(target : [
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'ci',
                reportFiles: 'benchmark.html',
                reportName: 'Benchmark',
                reportTitles: 'Benchmark'])
                }
            }
        }
    }
    post {
        failure {
            mail to: 'alexey.kozlov@h-its.org', subject: "FAILURE: ${currentBuild.fullDisplayName}", body: "Failed."
        }
    }
}
